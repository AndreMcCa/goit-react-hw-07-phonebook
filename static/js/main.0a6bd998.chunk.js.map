{"version":3,"sources":["components/ContactForm/Input/Input.js","redux/contacts-actions.js","redux/contacts-operation.js","redux/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactList/Contact/Contact.js","components/ContactList/ContactList.js","App.js","redux/contacts-reducer.js","redux/store.js","index.js"],"names":["Input","label","type","name","value","onChange","addContactRequest","createAction","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","fetchContactRequest","fetchContactSuccess","fetchContactError","filterContact","axios","defaults","baseURL","getFilter","state","contacts","filter","getItems","items","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","item","includes","ContactForm","useSelector","dispatch","useDispatch","useState","setName","number","setNumber","onSubmit","e","preventDefault","trim","normalizedName","find","toast","error","post","then","data","catch","addContact","autoComplete","target","children","Contact","contact","onDelete","id","onClick","ContactsList","useEffect","get","map","delete","App","autoClose","itemsReducer","createReducer","_","action","payload","filterReducer","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","rootReduscer","contactsReducer","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a6bd998.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nexport default function Input({label, type, name, value, onChange}) {\r\n    return (\r\n    <label> {label}\r\n        <input type={type} name={name} value={value} onChange={onChange}/>\r\n    </label>\r\n    )\r\n}\r\n\r\nInput.propTypes = {\r\n    label: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n}","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest')\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess')\r\nexport const addContactError = createAction('contacts/addContactError')\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest')\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess')\r\nexport const deleteContactError = createAction('contacts/deleteContactErrodelete')\r\n\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest')\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess')\r\nexport const fetchContactError = createAction('contacts/fetchContactError')\r\n\r\nexport const filterContact = createAction('contacts/changeFilte')\r\n\r\n\r\n","import axios from 'axios';\r\nimport {\r\n    addContactSuccess,\r\n    addContactError, \r\n    addContactRequest, \r\n    deleteContactRequest, \r\n    deleteContactError, \r\n    deleteContactSuccess, \r\n    fetchContactRequest, \r\n    fetchContactError, \r\n    fetchContactSuccess} from './contacts-actions'\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nexport const fetchContact = () => dispatch => {\r\n    dispatch(fetchContactRequest())\r\n\r\n    axios.get('/contacts').then(({data}) => dispatch(fetchContactSuccess(data))).catch(error => dispatch(fetchContactError(error))) \r\n}\r\n\r\nexport const addContact = (name, number) => dispatch => {\r\n    const item = {name, number };\r\n\r\n    dispatch(addContactRequest())\r\n\r\n    axios.post('/contacts', item)\r\n    .then(({data}) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error))) \r\n}\r\n\r\n\r\nexport const deleteContact = (id) => dispatch => {\r\n\r\n    dispatch(deleteContactRequest())\r\n\r\n    axios.delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch(error =>  dispatch(deleteContactError(error)))\r\n\r\n}\r\n\r\n\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getFilter = (state) => state.contacts.filter;\r\nexport const getItems = (state) => state.contacts.items;\r\n\r\nexport const  getVisibleContacts = createSelector([getItems, getFilter], (items, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    \r\n    return  items.filter(item => item.name.toLowerCase().includes(normalizedFilter))\r\n\r\n})","// import React, { Component } from 'react';\r\nimport {useState} from 'react';\r\nimport { useSelector, useDispatch} from 'react-redux'\r\nimport { toast } from  'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport Input from './Input/Input';\r\nimport {addContact} from '../../redux/contacts-operation'\r\nimport { getItems } from '../../redux/contacts-selectors';\r\n\r\n\r\nexport default function ContactForm() {\r\n\r\n    const contacts = useSelector((state) => getItems(state));\r\n    const dispatch = useDispatch();\r\n\r\n    const [name, setName] = useState('')\r\n    const [number, setNumber] = useState('')\r\n\r\n    function handleNameChange (e) {\r\n        const value = e.target.value;\r\n        setName(value);\r\n    }\r\n\r\n    function handleNamberChange (e) {\r\n        const value = e.target.value;\r\n        setNumber(value);\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        if (name.trim() === '' || number.trim() === '') {\r\n            toast.error('Заполните поле');\r\n            return\r\n        }\r\n\r\n        const normalizedName = name.toLowerCase();\r\n        const hasContact = contacts.find(({name}) => name.toLowerCase() === normalizedName);\r\n        \r\n        if(hasContact) {\r\n            toast.error(`Контакт с именем ${name} уже существует`)\r\n            return\r\n        }\r\n\r\n        dispatch(addContact(name, number))\r\n        reset();\r\n    }\r\n\r\n    function reset () {\r\n        setName('');\r\n        setNumber('');\r\n    }\r\n\r\n    return (\r\n        <form key='AddContactForm' onSubmit={handleSubmit} autoComplete=\"off\">\r\n            <Input label=\"Name\" type=\"text\" name=\"name\" value={name} onChange={handleNameChange} />\r\n            <Input label=\"Number\" type=\"text\" name=\"number\" value={number} onChange={handleNamberChange} />\r\n            <button type='submit'  children='Add contact'></button>\r\n        </form>\r\n    )\r\n}\r\n","import PropTypes from 'prop-types';\r\n\r\nexport default function Contact({ contact, onDelete }) {\r\n\r\n        return (\r\n            <li>\r\n                <p>{contact.name} {contact.number}</p> \r\n                <button id={contact.id} onClick={onDelete}>Delete</button>\r\n            </li>          \r\n        )   \r\n}\r\n\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired,\r\n    onDelete: PropTypes.func.isRequired,\r\n}","import {useEffect} from 'react';\r\nimport { useSelector, useDispatch} from 'react-redux'\r\n\r\nimport Contact from \"./Contact/Contact\";\r\nimport { fetchContact, deleteContact} from '../../redux/contacts-operation';\r\nimport { getVisibleContacts } from '../../redux/contacts-selectors';\r\n\r\nexport default function ContactsList() {\r\n\r\n    const dispatch = useDispatch();\r\n    const contacts = useSelector(state => getVisibleContacts(state));\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchContact())\r\n    }, [])\r\n\r\n    return (\r\n        <ul>\r\n            {contacts.map(contact => (<Contact key={contact.id} contact={contact} onDelete={() => dispatch(deleteContact(contact.id))}/>))}\r\n      </ul>\r\n    )\r\n}\r\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ToastContainer } from  'react-toastify';\n\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from \"./components/ContactForm/Input/Input\";\nimport ContactList from \"./components/ContactList/ContactList\";\n\nimport {filterContact} from './redux/contacts-actions';\nimport {getFilter} from './redux/contacts-selectors'\n\nexport default function App(){\n\n  const value = useSelector((state) => getFilter(state))\n  const dispatch = useDispatch();\n\n      return (\n        <>\n            <ContactForm />\n\n            <h2>Contacts</h2>\n            <Filter label=\"Find contacts by name\" value={value} type=\"text\" name=\"filter\"  onChange={(e) => dispatch(filterContact(e.target.value))}/>\n\n          <ContactList />\n          <ToastContainer autoClose={2500}/>\n        </>\n    )\n  }","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\nimport {\r\n    addContactSuccess, \r\n    addContactRequest, \r\n    addContactError, \r\n    deleteContactSuccess, \r\n    deleteContactError, \r\n    deleteContactRequest,\r\n    fetchContactRequest, \r\n    fetchContactError, \r\n    fetchContactSuccess, \r\n    filterContact} from './contacts-actions';\r\n\r\nconst itemsReducer = createReducer([], {\r\n    [fetchContactSuccess]: (_, action) => action.payload,\r\n    [addContactSuccess]: (state, action) => [...state, action.payload],\r\n    [deleteContactSuccess]: (state, action) => state.filter(contact => contact.id !== action.payload),\r\n})\r\n\r\nconst filterReducer = createReducer('', {\r\n    [filterContact]: (_, action) => action.payload\r\n})\r\n\r\nconst loading = createReducer(false, \r\n    {\r\n    [fetchContactRequest]: () => true,\r\n    [fetchContactSuccess]: () => false,\r\n    [fetchContactError]: () => false,\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n   items: itemsReducer,\r\n   filter: filterReducer,\r\n})\r\n\r\n","import { combineReducers } from 'redux';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport { \r\n  persistStore, \r\n  persistReducer, \r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER } from 'redux-persist'\r\n// import storage from 'redux-persist/lib/storage'\r\nimport logger from 'redux-logger'\r\n\r\nimport contactsReducer from './contacts-reducer';\r\n\r\n// const initialState = {\r\n//    contacts: {\r\n//     items: [],\r\n//     filter: ''\r\n//   }\r\n// };\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n  serializableCheck: {\r\n    ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\r\n  }\r\n}), logger];\r\n\r\nconst rootReduscer = combineReducers({\r\n  contacts: contactsReducer\r\n})\r\n\r\n\r\nconst store = configureStore({\r\n   reducer: rootReduscer,\r\n   devTools: process.env.NODE_ENV === 'development',\r\n   middleware,\r\n})\r\n\r\n// const persistor = persistStore(store);\r\n\r\n// export default {persistor, store};\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\n// import { PersistGate } from 'redux-persist/integration/react'\n\nimport App from './App';\nimport store from './redux/store';\n \nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate  loading={null} persistor={store.persistor}> */}\n        <App />\n      {/* </PersistGate>   */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}